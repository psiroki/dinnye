#include "input.hh"

#include <iostream>

namespace {

const uint8_t defaultLayoutBytes[] = {
#ifdef USE_SDL2
  0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x6d, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xe5, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x51, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0xe1, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x28, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
#else
  0x0f,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x4d,0x00,0x00,0x00,
  0x1c,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x65,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,
  0x20,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x71,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,
  0x2f,0x01,0x00,0x00,0x09,0x00,0x00,0x00,0x77,0x00,0x00,0x00,0x05,0x00,0x00,0x00,
  0x1b,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x13,0x01,0x00,0x00,0x04,0x00,0x00,0x00,
  0x0d,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x30,0x01,0x00,0x00,0x0a,0x00,0x00,0x00,
  0x61,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
  0x11,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x14,0x01,0x00,0x00,0x03,0x00,0x00,0x00,
  0x73,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x12,0x01,0x00,0x00,0x02,0x00,0x00,0x00,
#endif
};

#ifdef MIYOOA30
const uint8_t miyooMini[] = {
#ifdef USE_SDL2
  0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x6b, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0xe1, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x51, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe2, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x28, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x4f, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0xe0, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00
#else
  0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x75, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x30, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x32, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x13, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x34, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x14, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x11, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00
#endif
};
#endif

#ifdef BITTBOY
const uint8_t bittboy[] = {
  0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x75, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x30, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x32, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x13, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x34, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x14, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x11, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00
};
#endif

  const char * const controlNames[] {
    "UNMAPPED",
    "UP",
    "DOWN",
    "LEFT",
    "RIGHT",
    "NORTH",
    "SOUTH",
    "WEST",
    "EAST",
    "R1",
    "L1",
    "R2",
    "L2",
    "START",
    "SELECT",
    "MENU",
    "LAST_ITEM",
  };
}

const KeyMapTable* const InputMapping::defaultLayout =
#if defined(MIYOOA30)
  reinterpret_cast<const KeyMapTable*>(miyooMini);
#elif defined(BITTBOY)
  reinterpret_cast<const KeyMapTable*>(bittboy);
#else
  reinterpret_cast<const KeyMapTable*>(defaultLayoutBytes);
#endif

void InputMapping::dumpTable() {
  for (int i = 0; i < table->numEntries; ++i) {
    const int32_t *entry = table->mappings + i * 2;
    int val = entry[1];
    bool known = val >= 0 && val < sizeof(controlNames) / sizeof(*controlNames);
    const char *name = known
      ? controlNames[val]
      : "Unknown";
    std::cout << entry[0] << ": " << name;
    if (!known) std::cout << " (" << val << ")";
    std::cout << std::endl;
  }
}

Control InputMapping::mapRaw(int32_t val) const {
  uint32_t hash = table->hasher.hash(val);
  for (int i = table->maxProbes; i > 0; --i, ++hash) {
    uint32_t baseIndex = 2*(hash % table->numEntries);
    const int32_t *entry = table->mappings + baseIndex;
    if (entry[0] == val) return static_cast<Control>(entry[1]);
  }
  return Control::UNMAPPED;
}
