#include "input.hh"

#include <iostream>

namespace {

const uint8_t defaultLayoutBytes[] = {
#if defined(MIYOOA30) || defined(MIYOO)
#  ifdef USE_SDL2
    0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x6b, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0xe1, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe2, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x28, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x4f, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0xe0, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00
#  else
    0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x75, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x30, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x32, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x13, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x34, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x14, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x11, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00
#  endif
#elif defined(BITTBOY)
  0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x75, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x30, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x32, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x13, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x34, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x14, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x11, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00
#elif defined(RG35XX)
  0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x01, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x00, 0x01, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x01, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x01, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00
#elif defined(RG35XX22)
  0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x16, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x01, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00
#else
#  ifdef USE_SDL2
    0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x6d, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x29, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xe5, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0xe1, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x28, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
#  else
    0x0f,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x4d,0x00,0x00,0x00,
    0x1c,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x65,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x71,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,
    0x2f,0x01,0x00,0x00,0x09,0x00,0x00,0x00,0x77,0x00,0x00,0x00,0x05,0x00,0x00,0x00,
    0x1b,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x13,0x01,0x00,0x00,0x04,0x00,0x00,0x00,
    0x0d,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x30,0x01,0x00,0x00,0x0a,0x00,0x00,0x00,
    0x61,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x11,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x14,0x01,0x00,0x00,0x03,0x00,0x00,0x00,
    0x73,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x12,0x01,0x00,0x00,0x02,0x00,0x00,0x00,
#  endif
#endif
};

  const char * const controlNames[] {
    "UNMAPPED",
    "UP",
    "DOWN",
    "LEFT",
    "RIGHT",
    "NORTH",
    "SOUTH",
    "WEST",
    "EAST",
    "R1",
    "L1",
    "R2",
    "L2",
    "START",
    "SELECT",
    "MENU",
    "LAST_ITEM",
  };

#ifdef USE_GAME_CONTROLLER
#pragma message "Using game controller for input"
#define INT_PAIR(a, b) { static_cast<int32_t>(a), static_cast<int32_t>(b), }
  const int32_t gameControllerMapping[][2] = {
    INT_PAIR(SDL_CONTROLLER_BUTTON_INVALID, Control::UNMAPPED),
    INT_PAIR(SDL_CONTROLLER_BUTTON_A, Control::SOUTH),
    INT_PAIR(SDL_CONTROLLER_BUTTON_B, Control::EAST),
    INT_PAIR(SDL_CONTROLLER_BUTTON_X, Control::WEST),
    INT_PAIR(SDL_CONTROLLER_BUTTON_Y, Control::NORTH),
    INT_PAIR(SDL_CONTROLLER_BUTTON_BACK, Control::SELECT),
    INT_PAIR(SDL_CONTROLLER_BUTTON_GUIDE, Control::MENU),
    INT_PAIR(SDL_CONTROLLER_BUTTON_START, Control::START),
    INT_PAIR(SDL_CONTROLLER_BUTTON_LEFTSTICK, Control::UNMAPPED),
    INT_PAIR(SDL_CONTROLLER_BUTTON_RIGHTSTICK, Control::UNMAPPED),
    INT_PAIR(SDL_CONTROLLER_BUTTON_LEFTSHOULDER, Control::L1),
    INT_PAIR(SDL_CONTROLLER_BUTTON_RIGHTSHOULDER, Control::R1),
    INT_PAIR(SDL_CONTROLLER_BUTTON_DPAD_UP, Control::UP),
    INT_PAIR(SDL_CONTROLLER_BUTTON_DPAD_DOWN, Control::DOWN),
    INT_PAIR(SDL_CONTROLLER_BUTTON_DPAD_LEFT, Control::LEFT),
    INT_PAIR(SDL_CONTROLLER_BUTTON_DPAD_RIGHT, Control::RIGHT),
    INT_PAIR(SDL_CONTROLLER_BUTTON_MAX, Control::UNMAPPED),
  };
  const int32_t numGameControllerMappings = sizeof(gameControllerMapping) / sizeof(gameControllerMapping[0]);
#endif

}

const KeyMapTable* const InputMapping::defaultLayout = reinterpret_cast<const KeyMapTable*>(defaultLayoutBytes);

void InputMapping::dumpTable() {
  for (int i = 0; i < table->numEntries; ++i) {
    const int32_t *entry = table->mappings + i * 2;
    int val = entry[1];
    bool known = val >= 0 && val < sizeof(controlNames) / sizeof(*controlNames);
    const char *name = known
      ? controlNames[val]
      : "Unknown";
    std::cout << entry[0] << ": " << name;
    if (!known) std::cout << " (" << val << ")";
    std::cout << std::endl;
  }
}

Control InputMapping::mapRaw(int32_t val) const {
  uint32_t hash = table->hasher.hash(val);
  for (int i = table->maxProbes; i > 0; --i, ++hash) {
    uint32_t baseIndex = 2*(hash % table->numEntries);
    const int32_t *entry = table->mappings + baseIndex;
    if (entry[0] == val) return static_cast<Control>(entry[1]);
  }
  return Control::UNMAPPED;
}

#ifdef USE_GAME_CONTROLLER
void InputMapping::initControllerMapping() {
  for (int i = 0; i < numGameControllerMappings; ++i) {
    const int32_t *pair = gameControllerMapping[i];
    if (pair[0] >= 0 && pair[0] < sizeof(controllerButtonMapping) / sizeof(*controllerButtonMapping)) {
      controllerButtonMapping[pair[0]] = static_cast<Control>(pair[1]);
    }
  }
}

Control InputMapping::mapGameControllerButton(SDL_GameControllerButton button) const {
  int32_t i = static_cast<int32_t>(button);
  if (i >= 0 && i < sizeof(controllerButtonMapping) / sizeof(*controllerButtonMapping))
    return controllerButtonMapping[i];
  return Control::UNMAPPED;
}
#endif
